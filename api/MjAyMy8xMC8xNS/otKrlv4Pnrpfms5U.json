{"title":"贪心算法","date":"2023-10-15T11:09:08.364Z","date_formatted":{"ll":"Oct 15, 2023","L":"10/15/2023","MM-DD":"10-15"},"link":"2023/10/15/贪心算法","updated":"2023-10-15T11:25:44.995Z","content":"<h1 id=\"贪心算法\">贪心算法<a title=\"#贪心算法\" href=\"#贪心算法\"></a></h1>\n<p>贪心算法，又名贪婪法，是寻找<strong>最优解问题</strong>的常用方法，这种方法模式一般将求解过程分成<strong>若干个步骤</strong>，但每个步骤都应用贪心原则，选取当前状态下<strong>最好/最优的选择</strong>（局部最有利的选择），并以此希望最后堆叠出的结果也是最好/最优的解。</p>\n<p><strong>贪婪法的基本步骤：</strong></p>\n<p>步骤 1：从某个初始解出发；<br>\n步骤 2：采用迭代的过程，当可以向目标前进一步时，就根据局部最优策略，得到一部分解，缩小问题规模；<br>\n步骤 3：将所有解综合起来。</p>\n<h1 id=\"最短路\">最短路<a title=\"#最短路\" href=\"#最短路\"></a></h1>\n<p>​<img src=\"assets/net-img-20200411222316131-20231013003943-5o8ak8s.jpg\" alt=\"\" loading=\"lazy\">​</p>\n<p><a href=\"https://blog.csdn.net/wmy0217_/article/details/105438163\" target=\"_blank\">最短路算法总结（超详细~）-CSDN 博客</a></p>\n<h2 id=\"dijkstra\">dijkstra<a title=\"#dijkstra\" href=\"#dijkstra\"></a></h2>\n<ul>\n<li>每次从未标记的节点中寻找距离出发点最近的节点，标记，收录到最优路径集合中</li>\n<li>计算刚加入的节点 A 到相邻节点 B 的距离，不包括已标记的节点</li>\n<li>若 <code>节点A到源点的距离</code>​ + <code>节点A到节点B的边长</code>​ &lt; <code>节点B到源点的距离</code>​，更新节点 B 到源点的值</li>\n<li>重复以上步骤，直到未标记的节点未空时，停止算法</li>\n</ul>\n<p><a href=\"https://www.bilibili.com/video/BV1zz4y1m7Nq?vd_source=bc4fa866e16a93e8322d340eefe71de3\" target=\"_blank\">【算法】最短路径查找—Dijkstra 算法_哔哩哔哩_bilibili</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"type\">int</span> dist[], <span class=\"type\">bool</span> st[], <span class=\"type\">int</span> grid[][N])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dist[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i&lt;=n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = <span class=\"number\">-1</span>;<span class=\"comment\">//标记最小权值点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j&lt;=n; j++)<span class=\"comment\">//寻找最小权值点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(st[j] == <span class=\"literal\">false</span> &amp;&amp; (t == <span class=\"number\">-1</span> || dist[j] &lt; dist[t]))</span><br><span class=\"line\">                t = j;</span><br><span class=\"line\">        st[t] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j&lt;=n; j++)</span><br><span class=\"line\">            dist[j] = <span class=\"built_in\">min</span>(dist[j], dist[t] + grid[t][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"bellman_ford\">bellman_ford<a title=\"#bellman_ford\" href=\"#bellman_ford\"></a></h2>\n<h3 id=\"优点\">优点<a title=\"#优点\" href=\"#优点\"></a></h3>\n<ul>\n<li>和 dijkstra 不同的是，BF 算法可以解决负环的最短路径问题，同时可以判断负环是否存在。</li>\n<li>环：从某个顶点出发、经过若干个不同的顶点，可以回到该顶点的情况。</li>\n<li>零环、正环、负环</li>\n</ul>\n<h3 id=\"思路\">思路<a title=\"#思路\" href=\"#思路\"></a></h3>\n<ol>\n<li>\n<p>初始化源点 s 到各个点 v 的路径 <code>dis[v] = ∞，dis[s] = 0</code>​。</p>\n</li>\n<li>\n<p>进行 n - 1 次遍历，每次遍历对所有边进行松弛操作，满足则将权值更新。<br>\n松弛操作：以 a 为起点，b 为终点，ab 边长度为 w 为例。dis[a]代表源点 s 到 a 点的路径长度，dis[b]代表源点 s 到 b 点的路径长度。如果满足下面的式子则将 <code>dis[b]</code>​ 更新为 <code>dis[a] + w</code>​。</p>\n<ul>\n<li>​<code>dis[b] &gt; dis[a] + w</code>​</li>\n</ul>\n</li>\n<li>\n<p>遍历都结束后，若再进行一次遍历，还能得到 s 到某些节点更短的路径的话，则说明存在负环路。</p>\n<p>理由在于：对于给定 n 个节点的图，从 i 到 j，最短路径至多有 n-1 条路径，当出现 n 条路径时，说明在该条路径上至少存在一个环，也就是如果在进行一次遍历，如果节点的最短路径还能得到更新，那么只有环存在时，才会更新路径</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> v, w;<span class=\"comment\">//v是出边，w是当前点到出边v的权值</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;edge&gt; e[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> dis[maxn];</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bellmanford</span><span class=\"params\">(<span class=\"type\">int</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis, <span class=\"number\">0x3f</span>, <span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">\tdis[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag; <span class=\"comment\">// 判断一轮循环过程中是否发生松弛操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)<span class=\"comment\">//至多遍历n-1次得到最短路径</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> u = <span class=\"number\">1</span>; u &lt;= n; u++)<span class=\"comment\">//依次遍历每一个点</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dis[u] == inf)<span class=\"comment\">//当前点到源点还不存在路径时，不更新该点，理由如下</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;<span class=\"comment\">// 无穷大与常数加减仍然为无穷大，因此最短路长度为 inf 的点引出的边不可能发生松弛操作</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> ed : e[u])<span class=\"comment\">//遍历当前点的所有邻边</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> v = ed.v, w = ed.w;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tdis[v] = dis[u] + w;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"literal\">true</span>;<span class=\"comment\">//存在松弛操作，打上标记</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!flag)<span class=\"comment\">// 没有可以松弛的边时就停止算法</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 第 n 轮循环仍然可以松弛时说明 s 点可以抵达一个【负环】</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‍</p>\n<h2 id=\"floyd\">floyd<a title=\"#floyd\" href=\"#floyd\"></a></h2>\n<p>**视频讲解：**​<a href=\"https://www.bilibili.com/video/BV1w54y1Q79E?spm_id_from=333.880.my_history.page.click&amp;vd_source=bc4fa866e16a93e8322d340eefe71de3\" target=\"_blank\">最短路径（二）Floyd 算法_哔哩哔哩_bilibili</a></p>\n<ul>\n<li>解决图中任意点到某一点之间的最短路问题，例如 P 点到 M 点，中间可以直达也可以经过其他点到达</li>\n</ul>\n<p>在视频中拓展：</p>\n<ul>\n<li>$A_{n*n}$ 矩阵依据公式 $a_{ij} = min(a_{ij},a_{ik} + a_{kj})$ 迭代 n 次后得到 i 到 j 的最短路径，但是得不到经过那些点，可以用一个额外的数组来记录经过的点，在视频讲解的末尾位置</li>\n<li>$A_{n*n}$ 矩阵依据公式 $a_{ij} = min(a_{ij},max(a_{ik}, a_{kj}))$ 可以得到 i 到 j 的所有通路集合中的通路的最大边的的最小值，就是在这一堆通路中，每条通路都有一条最大的边，在将这些边中的最小值取出</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//针对无向图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设k为中间节点，检查从i到j的距离和i到k，k到j（即以k作为中间节点绕行）的距离</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>; k&lt;n; k++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j&lt;n; j++)&#123;</span><br><span class=\"line\">                grid[i][j] = grid[j][i] = <span class=\"built_in\">min</span>(grid[i][j], grid[i][k] + grid[k][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"最小生成树\">最小生成树<a title=\"#最小生成树\" href=\"#最小生成树\"></a></h1>\n<h2 id=\"prim\">prim<a title=\"#prim\" href=\"#prim\"></a></h2>\n<p>Prim （普里姆）算法是另一种常见并且好写的最小生成树算法。该算法的基本思想是从一个结点开始，不断加点（而不是 Kruskal 算法的加边）。具有贪心的思想。</p>\n<p>具体来说，每次要选择距离集合（已访问点集合）最小的一个结点，以及用新的边更新其他结点的距离。</p>\n<p>其实跟 Dijkstra 算法一样，每次找到距离最小的一个点，可以暴力找也可以用堆维护。</p>\n<p>堆优化的方式类似 Dijkstra 的堆优化，但如果使用二叉堆等不支持 decrease-key 的堆，复杂度就不优于 Kruskal，常数也比 Kruskal 大。所以，一般情况下都使用 Kruskal 算法，在稠密图尤其是完全图上，暴力 Prim 的复杂度比 Kruskal 优，但 <strong>不一定</strong> 实际跑得更快。</p>\n<p>时间复杂度：<code>O(n^2)</code>​</p>\n<h3 id=\"流程\">流程<a title=\"#流程\" href=\"#流程\"></a></h3>\n<ul>\n<li>初始化：dist[N]为所有点到集合的距离，初始化为无穷大</li>\n<li>任选一个点，然后将该点加入最短路集合</li>\n<li>寻找距离到最短路集合最近的点，同时将该点加入最短路集合中</li>\n<li>遍历该点的邻接点，更新邻接点到集合的距离 dist</li>\n<li>重复三四步骤，n 次循环，即遍历 n 个点，得到最小生成树</li>\n</ul>\n<h3 id=\"思路-1\">思路<a title=\"#思路-1\" href=\"#思路-1\"></a></h3>\n<p>在每一次选择一个点加入最小生成树集合中后，都会更新该点的所有邻接点到集合的距离，我们只要维护 dist 这个距离就可以得到答案，例如</p>\n<p>第一次循环：在选取第一个点的时候，<code>t = 0，vis[0]==true</code>​，更新了该点的所有邻接点到 0 点的距离</p>\n<p>第二次循环：选取了到 0 点最近的一个点，加入最小生成树集合，更新该点的所有邻接点到该点的距离</p>\n<p>重复 n 次循环，也就是 n 个点，值得注意的是，我们每次选取的都是这个集合的所有邻接点，而这些邻接点都被更新过了，因此是可以得到答案的。</p>\n<p>同时：还需要注意，如果在除开第一次选的点以外的点中，找到一个到集合距离无穷大的点，那么也就是说这个点是孤立点，一定是无法构成最小生成树的，即可返回 <code>impossible</code>​</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> grid[N][N], n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> dist[N], vis[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">prim</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dist, <span class=\"number\">0x3f</span>, <span class=\"built_in\">sizeof</span>(dist));</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;n; i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j&lt;=n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!vis[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dist[t] &gt; dist[j]))</span><br><span class=\"line\">                t = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vis[t] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果该点非第一个点，但是该点到集合的距离是无穷大，也就是说该点是孤立出来的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &amp;&amp; dist[t] == INF)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i)<span class=\"comment\">//该点非第一个点</span></span><br><span class=\"line\">            sum += dist[t];</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j&lt;=n; j++)</span><br><span class=\"line\">            dist[j] = <span class=\"built_in\">min</span>(dist[j], grid[t][j]);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"kruskal\">kruskal<a title=\"#kruskal\" href=\"#kruskal\"></a></h2>\n<p>Kruskal （克鲁斯克尔）算法是一种常见并且好写的最小生成树算法，由 Kruskal 发明。该算法的基本思想是从小到大加入边，是个贪心算法。</p>\n<p>使用：并查集、图的存储、贪心</p>\n<p>例题：<a href=\"https://www.acwing.com/problem/content/description/4294/\" target=\"_blank\">4291. 丛林之路 - AcWing 题库</a></p>\n<p>时间复杂度：<code>O(mlogm)</code>​（m 是边数）</p>\n<h3 id=\"流程-1\">流程<a title=\"#流程-1\" href=\"#流程-1\"></a></h3>\n<ul>\n<li>将所有边按权值从小到大排序，时间复杂度 <code>O(mlogm)</code>​</li>\n<li>依次遍历所有边，如果某边的两点不构成回路，即加入最短路径集合</li>\n<li>统计最短路径集合中的边个数，如果小于 n-1，即不构成最小生成树，等于 n-1，即可构成最小生成树</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, w;<span class=\"comment\">//始点，终点，权</span></span><br><span class=\"line\">&#125;edges[M];</span><br><span class=\"line\"><span class=\"type\">int</span> p[N], cnt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">    edges[cnt].a = a, edges[cnt].b = b, edges[cnt].w = w, cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p[x] != x)</span><br><span class=\"line\">        p[x] = <span class=\"built_in\">find</span>(p[x]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">kruskal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i&lt;=n; i++) p[i] = i;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(edges, edges + cnt);</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, en = <span class=\"number\">0</span>;<span class=\"comment\">//权值和，路径条数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;cnt; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class=\"line\">        <span class=\"type\">int</span> pa = <span class=\"built_in\">find</span>(a), pb = <span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pa != pb)&#123;</span><br><span class=\"line\">            p[pa] = pb;</span><br><span class=\"line\">            sum += w;</span><br><span class=\"line\">            en++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(en &lt; n - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;无法构成最小生成树&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"multivalued dependencies","link":"2023/10/15/multivalued dependencies"},"next":{"title":"wxx2786的主页","link":"2023/10/15/wxx2786的主页"},"plink":"http://example.com/2023/10/15/贪心算法/","toc":[{"id":"贪心算法","title":"贪心算法","index":"1"},{"id":"最短路","title":"最短路","index":"2","children":[{"id":"dijkstra","title":"dijkstra","index":"2.1"},{"id":"bellman_ford","title":"bellman_ford","index":"2.2","children":[{"id":"优点","title":"优点","index":"2.2.1"},{"id":"思路","title":"思路","index":"2.2.2"}]},{"id":"floyd","title":"floyd","index":"2.3"}]},{"id":"最小生成树","title":"最小生成树","index":"3","children":[{"id":"prim","title":"prim","index":"3.1","children":[{"id":"流程","title":"流程","index":"3.1.1"},{"id":"思路-1","title":"思路","index":"3.1.2"}]},{"id":"kruskal","title":"kruskal","index":"3.2","children":[{"id":"流程-1","title":"流程","index":"3.2.1"}]}]}],"reading_time":"2456 words in 16 min"}