<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-15T03:27:58.919Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python电影票房预测</title>
    <link href="http://example.com/2023/10/15/wxx2786%E7%9A%84%E4%B8%BB%E9%A1%B5/"/>
    <id>http://example.com/2023/10/15/wxx2786%E7%9A%84%E4%B8%BB%E9%A1%B5/</id>
    <published>2023-10-15T03:26:43.128Z</published>
    <updated>2023-10-15T03:27:58.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h1><h2 id="python电影票房预测"><a href="#python电影票房预测" class="headerlink" title="python电影票房预测"></a>python电影票房预测</h2><h3 id="1-数据获取-spider"><a href="#1-数据获取-spider" class="headerlink" title="1.数据获取(spider)"></a>1.数据获取(spider)</h3><p>获取猫眼2018-2024年电影数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import time</span><br><span class="line">import csv</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    &#x27;user-agent&#x27;:&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.43&#x27;</span><br><span class="line">&#125;</span><br><span class="line">for year in range(2018, 2024):</span><br><span class="line">    url = f&quot;https://piaofang.maoyan.com/rankings/year?year=&#123;year&#125;&amp;limit=100&amp;tab=&#123;2024 - year&#125;&quot;</span><br><span class="line"></span><br><span class="line">    with open(f&#x27;&#123;year&#125;数据.csv&#x27;, &#x27;w&#x27;, newline=&#x27;&#x27;, encoding=&#x27;utf-8&#x27;) as csvfile:</span><br><span class="line">        writer = csv.writer(csvfile)</span><br><span class="line">        writer.writerow([&#x27;电影名称&#x27;, &#x27;上映时间&#x27;, &#x27;票房（万元）&#x27;, &#x27;平均票价&#x27;, &#x27;观影人数&#x27;])</span><br><span class="line"></span><br><span class="line">        res=requests.get(url,headers=data)</span><br><span class="line">        time.sleep(2)</span><br><span class="line"></span><br><span class="line">        soup=BeautifulSoup(res.text,&#x27;lxml&#x27;)</span><br><span class="line">        res2=soup.find(&#x27;div&#x27;,id=&quot;ranks-list&quot;)</span><br><span class="line">        list_res2=res2.find_all(&#x27;ul&#x27;,class_=&quot;row&quot;)</span><br><span class="line">        for list in list_res2:</span><br><span class="line">            moviename = list.find(&#x27;p&#x27;,class_=&quot;first-line&quot;).text</span><br><span class="line">            uptime = list.find(&#x27;p&#x27;,class_=&quot;second-line&quot;).text</span><br><span class="line">            boxOffice = list.find(&#x27;li&#x27;,class_=&quot;col2 tr&quot;).text</span><br><span class="line">            aver_price = list.find(&#x27;li&#x27;,class_=&quot;col3 tr&quot;).text</span><br><span class="line">            num_p = list.find(&#x27;li&#x27;,class_=&quot;col4 tr&quot;).text</span><br><span class="line">            writer.writerow([moviename, uptime, boxOffice, aver_price, num_p])</span><br></pre></td></tr></table></figure><h2 id="2-数据清洗"><a href="#2-数据清洗" class="headerlink" title="2.数据清洗"></a>2.数据清洗</h2><h3 id="A-python"><a href="#A-python" class="headerlink" title="A-python"></a>A-python</h3><p>使用pandas中的dataframe格式存储数据信息并对数据进行清洗</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data=pd.read_excel(io=&#x27;test.xlsx&#x27;)</span><br><span class="line">data_df=pd.DataFrame(data)</span><br><span class="line">new_data=pd.read_excel(io=&#x27;new_data.xlsx&#x27;)</span><br><span class="line">new_data_df=pd.DataFrame(new_data)</span><br></pre></td></tr></table></figure><h3 id="B-sql"><a href="#B-sql" class="headerlink" title="B-sql"></a>B-sql</h3><p>将python爬取的数据使用json文件存储或excel文件存储导入数据库，或使用dbeaver将数据导入mysql中，在dbeaver中执行sql语句对数据进行数据清洗</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#python导入数据到mysql</span><br><span class="line">import mysql.connector</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">pysql=mysql.connector.connect(user=&#x27;root&#x27;,password=&#x27;123456&#x27;,host=&#x27;localhost&#x27;,database=&#x27;movie_box&#x27;)</span><br><span class="line">#选择数据库 if database is null,create a database</span><br><span class="line">my_cursor=mydb.cursor()</span><br><span class="line">data=pd.dataframe(&#x27;d:/*/&#x27;)</span><br><span class="line">sql=&#x27;insert &#123;****&#125; into talbe&#x27;</span><br><span class="line">my_cursor(sql)#使用游标执行sql语句(增删查改)</span><br></pre></td></tr></table></figure><p>dbeaver</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#在dbeaver创建表映射导入数据</span><br><span class="line">#执行sql语句</span><br><span class="line">use movie_box;#database</span><br><span class="line"> drop if (select *form movie_table)is null form movie_table;</span><br><span class="line"></span><br><span class="line">#去除与电影票房无关的数据，如时间</span><br><span class="line">drop time form movie_table;</span><br></pre></td></tr></table></figure><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>将与电影票房相关的信息作为特征值使用线性回归对未发行的电影进行票房预测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">new_movie=[]</span><br><span class="line"></span><br><span class="line">data=pd.read_excel(io=&#x27;test.xlsx&#x27;)</span><br><span class="line">data_df=pd.DataFrame(data)</span><br><span class="line">new_data=pd.read_excel(io=&#x27;new_data.xlsx&#x27;)</span><br><span class="line">new_data_df=pd.DataFrame(new_data)</span><br><span class="line">data_list1=[]</span><br><span class="line">data_list2=[]</span><br><span class="line">new_data_list=[]</span><br><span class="line">new_data_result=[]</span><br><span class="line">for i in range(len(new_data)):</span><br><span class="line">    data=[new_data.iloc[i][&#x27;a&#x27;],new_data.iloc[i][&#x27;d&#x27;],new_data.iloc[i][&#x27;e&#x27;]]#将一个电影的所有特征值作业放到一个列表中作为xi</span><br><span class="line">    #a=地区 b=场次 c=人次</span><br><span class="line">    new_data_list.append(data)#将xi插入到特征值列表中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#print(new_data_list) </span><br><span class="line">for i in range(31):</span><br><span class="line">    data_=[data_df.loc[i,&#x27;a&#x27;],data_df.loc[i,&#x27;d&#x27;],data_df.loc[i,&#x27;e&#x27;]]#a=地区 b=场次 c=人次</span><br><span class="line">    data_list1.append(data_)</span><br><span class="line">    data_list2.append(data_df.loc[i,&#x27;c&#x27;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_box=[]</span><br><span class="line">def BoxOffice(List_1,List_2,new_list):</span><br><span class="line">    #电影特征值 List1  票房List2</span><br><span class="line">    #new_list 新的预测票房的特征值列表</span><br><span class="line">    model=LinearRegression()</span><br><span class="line">    model.fit(List_1,List_2)</span><br><span class="line">  </span><br><span class="line">    for i in new_list:</span><br><span class="line"></span><br><span class="line">        prediction=model.predict(np.array(i).reshape(1,-1))</span><br><span class="line">        new_box.append(prediction)</span><br><span class="line"></span><br><span class="line"># 在机器学习时，对随机值进行处理后可能会输出负值</span><br><span class="line">#而在发生复制的情况是场次大于人次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BoxOffice(data_list1,data_list2,new_data_list)</span><br><span class="line">for i in new_box:</span><br><span class="line">    new_data_result.append(i[0])</span><br><span class="line"></span><br><span class="line">#print(data_df)</span><br><span class="line">#print(new_data_df)</span><br><span class="line">#print(new_data_result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><h3 id="1-数据关联图"><a href="#1-数据关联图" class="headerlink" title="1.数据关联图"></a>1.数据关联图</h3><p>部分数据与票房存在相关性，如地区与票房，可使用饼状图将其展示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from pyecharts import options as opts</span><br><span class="line">from pyecharts.charts import Pie</span><br><span class="line">from pyecharts.faker import Faker</span><br><span class="line">predlist_city=[&#x27;江苏&#x27;,&#x27;四川&#x27;,&#x27;天津&#x27;,&#x27;辽宁&#x27;,&#x27;内蒙古&#x27;,&#x27;重庆&#x27;]</span><br><span class="line">list_pred=[]</span><br><span class="line">for i in new_data_result:</span><br><span class="line">    list_pred.append(i)</span><br><span class="line">listdata_pred = [round(x, 2) for x in list_pred]</span><br><span class="line">c = (</span><br><span class="line">    Pie()</span><br><span class="line">    .add(</span><br><span class="line">        &quot;&quot;,</span><br><span class="line">        [list(z) for z in zip(predlist_city, listdata_pred)],</span><br><span class="line">        center=[&quot;35%&quot;, &quot;50%&quot;],</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=&quot;2023下半年\n部分城市票房预测占比图&quot;),</span><br><span class="line">        legend_opts=opts.LegendOpts(pos_left=&quot;15%&quot;),</span><br><span class="line">    )</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(formatter=&quot;&#123;b&#125;: \n&#123;c&#125;&quot;))</span><br><span class="line">    .render(&#x27;232.html&#x27;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>​<img src="/assets/2023%E4%B8%8B%E5%8D%8A%E5%B9%B4%E9%83%A8%E5%88%86%E5%9F%8E%E5%B8%82%E7%A5%A8%E6%88%BF%E9%A2%84%E6%B5%8B%E5%8D%A0%E6%AF%94%E5%9B%BE-20231011205107-qe51vv8.jpg" alt="2023下半年部分城市票房预测占比图">​</p><p>​<img src="/assets/2011-2023%E6%AF%8F%E6%9C%88%E7%A5%A8%E6%88%BF%E5%8D%A0%E6%AF%94%E7%BB%9F%E8%AE%A1-20231011205133-et8yr7j.jpg" alt="2011-2023每月票房占比统计">​</p><pre><code>                                    月度与票房占比</code></pre><h3 id="2-票房预测图"><a href="#2-票房预测图" class="headerlink" title="2.票房预测图"></a>2.票房预测图</h3><p>将票房预测结构与特征值使用柱状图输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">BoxOffice(data_list1,data_list2,new_data)</span><br><span class="line">for i in new_box:</span><br><span class="line">    new_data_result.append(i[0])</span><br><span class="line">#print(df_1)</span><br><span class="line">#print(new_data_result)</span><br><span class="line">toptic_pre=new_data_result[10:20]</span><br><span class="line">pertic_list = [round(x, 2) for x in toptic_pre]</span><br><span class="line">#print(pertic_list)</span><br><span class="line">ticpre=pd.read_csv(r&#x27;排行榜数据-year.csv&#x27;)</span><br><span class="line">tic_datatop=ticpre.iloc[10:20]</span><br><span class="line">tic_data=tic_datatop[&#x27;票房（万元）&#x27;].tolist()</span><br><span class="line">filna_datatop=ticpre.iloc[10:20]</span><br><span class="line">filna_data=filna_datatop[&#x27;电影名称&#x27;].tolist()</span><br><span class="line"></span><br><span class="line">from pyecharts import options as opts</span><br><span class="line">from pyecharts.charts import Bar</span><br><span class="line">from pyecharts.faker import Faker</span><br><span class="line">c = (</span><br><span class="line">    Bar()</span><br><span class="line">    .add_xaxis(filna_data)</span><br><span class="line">    .add_yaxis(&quot;当前票房&quot;, tic_data)</span><br><span class="line">    .add_yaxis(&quot;预测票房&quot;, pertic_list)</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=&quot;2023下半年票房预测&quot;, subtitle=&quot;&quot;))</span><br><span class="line">    .render(&#x27;233.html&#x27;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>​<img src="/assets/2023%E4%B8%8B%E5%8D%8A%E5%B9%B4%E7%A5%A8%E6%88%BF%E9%A2%84%E6%B5%8B-20231011205423-mov0f7b.jpg" alt="2023下半年票房预测">​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目经验&quot;&gt;&lt;a href=&quot;#项目经验&quot; class=&quot;headerlink&quot; title=&quot;项目经验&quot;&gt;&lt;/a&gt;项目经验&lt;/h1&gt;&lt;h2 id=&quot;python电影票房预测&quot;&gt;&lt;a href=&quot;#python电影票房预测&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>wxx_note</title>
    <link href="http://example.com/2023/10/15/wxx_note/"/>
    <id>http://example.com/2023/10/15/wxx_note/</id>
    <published>2023-10-15T03:16:34.484Z</published>
    <updated>2023-10-15T03:20:31.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Aboat-major"><a href="#Aboat-major" class="headerlink" title="Aboat major"></a>Aboat major</h1><p>‍</p><h2 id="multivalued-dependencies"><a href="#multivalued-dependencies" class="headerlink" title="multivalued dependencies"></a>multivalued dependencies</h2><ul><li><p>多值依赖的意义</p></li><li><p>多值依赖与函数依赖的区别</p></li><li><p>多值依赖的定义</p></li><li><p>多值依赖性质的证明(使用temple证明)</p><p>传递性</p><p>函数依赖可以看作是多值依赖的特殊情况</p><p>并规则</p><p>分解规则</p></li></ul><h3 id="传递性"><a href="#传递性" class="headerlink" title="传递性"></a><strong>传递性</strong></h3><p> 若X→→Y，Y→→Z，则X→→Z-Y。</p><p>证明该性质时，其存在两种特殊情况：</p><p>①在X∩[Y∪Z]&#x3D;Ø时，设存在U的子集X，Y，Z，K(X,Y,Z,K∈U)，其中K&#x3D;U-X-Y-Z。存在元组S，T属于关系r(S,T∈r)且S[X]&#x3D;T[X],并将YZ元组分解Y&#x3D; (Y-Z)∪(Y∩Z)，Z&#x3D; (Z-Y)∪(Y∩Z)，则有如表1.3.3下列元组</p><table><thead><tr><th></th><th>X</th><th>Y-Z</th><th>Y∩Z</th><th>Z-Y</th><th>K</th></tr></thead><tbody><tr><td>S</td><td>S[X]</td><td>S[Y-Z]</td><td>S[Y∩Z]</td><td>S[Z-Y]</td><td>S[K]</td></tr><tr><td>T</td><td>T[X]</td><td>T[Y-Z]</td><td>T[Y∩Z]</td><td>T[Z-Y]</td><td>T[K]</td></tr></tbody></table><p>表1.3.3</p><p>由X→→Y可得，w，v元组属于关系r(W,V∈r)，则如表1.3.4下列元组</p><table><thead><tr><th></th><th>X</th><th>Y-Z</th><th>Y∩Z</th><th>Z-Y</th><th>K</th></tr></thead><tbody><tr><td>W</td><td>W[X]</td><td>S[Y-Z]</td><td>S[Y∩Z]</td><td>T[Z-Y]</td><td>T[K]</td></tr><tr><td>V</td><td>V[X]</td><td>T[Y-Z]</td><td>T[Y∩Z]</td><td>S[Z-Y]</td><td>S[K]</td></tr></tbody></table><p>表1.3.4</p><p>其中W[X]&#x3D;V[X]&#x3D;S[X]&#x3D;T[X]。将现有S,T,W,V作为已知条件进行变换。</p><p>若需要求得X→→Z-Y成立，则根据多值依赖的元组定义则需要证明以下元组W’，V’满足W’，V’属于关系r(W’,V’∈r)，即如表1.3.5下列元组</p><table><thead><tr><th></th><th>X</th><th>Y-Z</th><th>Y∩Z</th><th>Z-Y</th><th>K</th></tr></thead><tbody><tr><td>W’</td><td>S[X]</td><td>T[Y-Z]</td><td>T[Y∩Z]</td><td>S[Z-Y]</td><td>T[K]</td></tr><tr><td>V’</td><td>T[X]</td><td>S[Y-Z]</td><td>S[Y∩Z]</td><td>T[Z-Y]</td><td>S[K]</td></tr></tbody></table><p>表1.3.5</p><p>现对S，W元组由Y→→Z可得W<del>1 ​</del>​<del>,V</del>​<del>1</del>元组，其中Y&#x3D; (Y-Z)∪(Y∩Z)，则有如表1.3.6下列元组</p><table><thead><tr><th></th><th>X</th><th>Y-Z</th><th>Y∩Z</th><th>Z-Y</th><th>K</th></tr></thead><tbody><tr><td>W<del>1</del></td><td>S[X]</td><td>S[Y-Z]</td><td>S[Y∩Z]</td><td>S[Z-Y]</td><td>T[K]</td></tr><tr><td>V<del>1</del></td><td>S[X]</td><td>S[Y-Z]</td><td>S[Y∩Z]</td><td>T[Z-Y]</td><td>S[K]</td></tr></tbody></table><p>表1.3.6</p><p>同理，对T，V元组由Y→→Z可得W<del>2 ​</del>​<del>,V</del>​<del>2</del>元组，其中Y&#x3D; (Y-Z)∪(Y∩Z) ，则有如表1.3.7下列元组</p><table><thead><tr><th></th><th>X</th><th>Y-Z</th><th>Y∩Z</th><th>Z-Y</th><th>K</th></tr></thead><tbody><tr><td>W<del>2</del></td><td>T[X]</td><td>T[Y-Z]</td><td>T[Y∩Z]</td><td>T[Z-Y]</td><td>S[K]</td></tr><tr><td>V<del>2</del></td><td>T[X]</td><td>T[Y-Z]</td><td>T[Y∩Z]</td><td>S[Z-Y]</td><td>T[K]</td></tr></tbody></table><p>表1.3.7</p><p>又有S[X]&#x3D; T[X]，则可知W’&#x3D;V<del>2</del>，V’&#x3D;V<del>1</del>，即X→→Z-Y。</p><p>②.在一般情况下，需要考虑元组X与元组Y∪Z的关系。设存在U的子集X，Y，Z，K(X,Y,Z,K∈U)，其中K&#x3D;U-X-Y-Z，存在元组S，T属于关系r(S,T∈r)且S[X]&#x3D;T[X]。现将Y∪Z分解：Y∪Z&#x3D; [Y-Z]∪[Y∩Z]∪[Z-Y]，则需将元组X分解：X&#x3D;X<del>0</del>∪X<del>1</del>∪X<del>2</del>∪X<del>3</del>，其中X<del>1</del>&#x3D;X∩(Y-Z),X<del>2</del>&#x3D;X∩[Y∩Z],X<del>3</del>&#x3D;X∩[Z-Y],X<del>0</del>&#x3D;X-X<del>1</del>-X<del>2</del>-X<del>3</del>，即X<del>0</del>，X<del>1</del>，X<del>2</del>，X<del>3</del>两两互不相交。则有如表1.3.8下列元组</p><table><thead><tr><th></th><th>X<del>0</del></th><th>X<del>1</del></th><th>X<del>2</del></th><th>X<del>3</del></th><th>Y-Z-X<del>1</del></th><th>Y∩Z-X<del>2</del></th><th>Z-Y-X<del>3­</del></th><th>K</th></tr></thead><tbody><tr><td>S</td><td>S[X<del>0</del>]</td><td>S[X<del>1</del>]</td><td>S[X<del>2</del>]</td><td>S[X<del>3</del>]</td><td>S[Y-Z-X<del>1</del>]</td><td>S[Y∩Z-X<del>2</del>]</td><td>S[Z-Y-X<del>3­</del>]</td><td>S[K]</td></tr><tr><td>T</td><td>T[X<del>0</del>]</td><td>T[X<del>1</del>]</td><td>T[X<del>2</del>]</td><td>T[X<del>3</del>]</td><td>T[Y-Z-X<del>1</del>]</td><td>T[Y∩Z-X<del>2</del>]</td><td>T[Z-Y-X<del>3­</del>]</td><td>T[K]</td></tr></tbody></table><p>表1.3.8</p><p>其中有X→→Y元组定义可得S[X<del>i</del>] &#x3D;T[X<del>i</del>] (i&#x3D;1,2,3)，和新元组W，V。则有如表1.3.9下列元组</p><table><thead><tr><th></th><th>X<del>0</del></th><th>X<del>1</del></th><th>X<del>2</del></th><th>X<del>3</del></th><th>Y-Z-X<del>1</del></th><th>Y∩Z-X<del>2</del></th><th>Z-Y-X<del>3­</del></th><th>K</th></tr></thead><tbody><tr><td>W</td><td>W[X<del>0</del>]</td><td>S[X<del>1</del>]</td><td>W[X<del>2</del>]</td><td>W[X<del>3</del>]</td><td>W[Y-Z-X<del>1</del>]</td><td>W[Y∩Z-X<del>2</del>]</td><td>W[Z-Y-X<del>3­</del>]</td><td>W[K]</td></tr><tr><td>V</td><td>V[X<del>0</del>]</td><td>V[X<del>1</del>]</td><td>V[X<del>2</del>]</td><td>T[X<del>3</del>]</td><td>V[Y-Z-X<del>1</del>]</td><td>V[Y∩Z-X<del>2</del>]</td><td>V[Z-Y-X<del>3­</del>]</td><td>V[K]</td></tr></tbody></table><p>表1.3.9</p><p>通过对比特殊情况与一般情况，则可发现在Y→→Z运用的过程中发生交换的元组分别为Y-Z-X<del>1</del>, Y∩Z-X<del>2</del>, Z-Y-X<del>3</del>, K。即在一般情况下，通过Y→→Z，(S,W)，(T,V)得到的新元组(W<del>1</del>,V<del>1</del>)，(W<del>2</del>,V<del>2</del>)其中(V<del>2</del>, V<del>1</del>)与所需要得到的X→→Z-Y的元组(W’,V’)相同。</p><p>即在一般情况下，若X→→Y，Y→→Z，则X→→Z-Y成立。</p><p>[王壮_multivalued dependencies_whpu.pdf](assets&#x2F;王壮_multivalued dependencies_whpu-20231013121646-6kctkqh.pdf)</p><h2 id="Intelligent-algorithms"><a href="#Intelligent-algorithms" class="headerlink" title="Intelligent algorithms"></a>Intelligent algorithms</h2><p>[王壮_Intelligent algorithms_whpu.pdf](assets&#x2F;王壮_Intelligent algorithms_whpu-20231013121739-h3ngilg.pdf)</p><h1 id="Aboat-algorithm"><a href="#Aboat-algorithm" class="headerlink" title="Aboat algorithm"></a>Aboat algorithm</h1><p>‍</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#二维数组版</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> w[<span class="number">1024</span>],c[<span class="number">1024</span>]</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;w[i]&gt;&gt;c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;j&lt;=n;j++)<span class="comment">//i是物品个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)<span class="comment">//j是背包空间</span></span><br><span class="line"><span class="keyword">if</span>(j&lt;w[i]) dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">eles dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j-w[i]]+c[i])</span><br><span class="line">cout&lt;&lt;dp[n][m];</span><br><span class="line">#一维数组版</span><br><span class="line"><span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> v,m;cin&gt;&gt;v&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=v;j--) dp[j]=<span class="built_in">max</span>(dp[j<span class="number">-1</span>],dp[j-v]+m);</span><br><span class="line">&#125;<span class="comment">//从m最大值开始遍历且最小值大于物品体积是为保证能够加入物品</span></span><br><span class="line">cout&lt;&lt;dp[m];</span><br></pre></td></tr></table></figure><ul><li>逐渐添加元素入背包，然后求在每个容量下的最大值(利用动态转移)</li><li>在逐渐增加背包容量下，当容量小于添加元素的体积时，该状态下的最大值v1与该容量下未添加元素时的最大值v2相同，而在大于添加元素的体积时，该状态需判断添加新元素与剩余空间所对应的值之和v3与未添加时的值v1的大小，取最大值</li></ul><p><a href="https://www.bilibili.com/video/BV1cg411g7Y6/">带你学透0-1背包问题！| 关于背包问题，你不清楚的地方，这里都讲了！| 动态规划经典问题 | 数据结构与算法_哔哩哔哩_bilibili</a></p><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><ul><li><p>最直接版完全背包</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m; cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;w[i]&gt;&gt;c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;j/w[i];k++)</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-k*w[i]]+k*c[i]);</span><br><span class="line">cout&lt;&lt;dp[m];</span><br></pre></td></tr></table></figure></li><li><p>​​优化版二维完全背包​</p><p>在完全背包问题中，物品可多项选择，及可以竖向转移—在未添加新物品时该容量下的值(01背包问题原理)，和竖向转移—在添加新物品的情况加进行动态规划(及在j-W[i]的背包大小所对应的值加上C[i]值)，然后取最大值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m; cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;w[i]&gt;&gt;c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j];<span class="comment">//竖向转移</span></span><br><span class="line"><span class="keyword">if</span>(j-w[i]&gt;=<span class="number">0</span>)dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i][j-w[i]]+c[i]);<span class="comment">//横向转移</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[n][m];</span><br></pre></td></tr></table></figure></li><li><p>最简版完全背包问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m; cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;w[i]&gt;&gt;c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=w[i];j&lt;=m;j++)&#123;</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-w[i]]+c[i]);</span><br><span class="line">cout&lt;&lt;dp[m];</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://www.jianshu.com/p/0b9018bbacd7">背包九讲系列1——01背包、完全背包、多重背包 - 简书 (jianshu.com)</a></p><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>贪心算法，又名贪婪法，是寻找<strong>最优解问题</strong>的常用方法，这种方法模式一般将求解过程分成<strong>若干个步骤</strong>，但每个步骤都应用贪心原则，选取当前状态下<strong>最好&#x2F;最优的选择</strong>（局部最有利的选择），并以此希望最后堆叠出的结果也是最好&#x2F;最优的解。</p><p><strong>贪婪法的基本步骤：</strong></p><p>步骤1：从某个初始解出发；<br>步骤2：采用迭代的过程，当可以向目标前进一步时，就根据局部最优策略，得到一部分解，缩小问题规模；<br>步骤3：将所有解综合起来。</p><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><p>​<img src="/assets/net-img-20200411222316131-20231013003943-5o8ak8s.jpg">​</p><p><a href="https://blog.csdn.net/wmy0217_/article/details/105438163">最短路算法总结（超详细~）-CSDN博客</a></p><h4 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h4><ul><li>每次从未标记的节点中寻找距离出发点最近的节点，标记，收录到最优路径集合中</li><li>计算刚加入的节点A到相邻节点B的距离，不包括已标记的节点</li><li>若 <code>节点A到源点的距离</code>​ + <code>节点A到节点B的边长</code>​ &lt; <code>节点B到源点的距离</code>​，更新节点B到源点的值</li><li>重复以上步骤，直到未标记的节点未空时，停止算法</li></ul><p><a href="https://www.bilibili.com/video/BV1zz4y1m7Nq?vd_source=bc4fa866e16a93e8322d340eefe71de3">【算法】最短路径查找—Dijkstra算法_哔哩哔哩_bilibili</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> dist[], <span class="type">bool</span> st[], <span class="type">int</span> grid[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dist[x] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;<span class="comment">//标记最小权值点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;=n; j++)<span class="comment">//寻找最小权值点</span></span><br><span class="line">            <span class="keyword">if</span>(st[j] == <span class="literal">false</span> &amp;&amp; (t == <span class="number">-1</span> || dist[j] &lt; dist[t]))</span><br><span class="line">                t = j;</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], dist[t] + grid[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bellman-ford"><a href="#bellman-ford" class="headerlink" title="bellman_ford"></a>bellman_ford</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>和dijkstra不同的是，BF算法可以解决负环的最短路径问题，同时可以判断负环是否存在。</li><li>环：从某个顶点出发、经过若干个不同的顶点，可以回到该顶点的情况。</li><li>零环、正环、负环</li></ul><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><ol><li><p>初始化源点s到各个点v的路径<code>dis[v] = ∞，dis[s] = 0</code>​。</p></li><li><p>进行n - 1次遍历，每次遍历对所有边进行松弛操作，满足则将权值更新。<br> 松弛操作：以a为起点，b为终点，ab边长度为w为例。dis[a]代表源点s到a点的路径长度，dis[b]代表源点s到b点的路径长度。如果满足下面的式子则将<code>dis[b]</code>​更新为<code>dis[a] + w</code>​。</p><ul><li>​<code>dis[b] &gt; dis[a] + w</code>​</li></ul></li><li><p>遍历都结束后，若再进行一次遍历，还能得到s到某些节点更短的路径的话，则说明存在负环路。</p><p> 理由在于：对于给定n个节点的图，从i到j，最短路径至多有n-1条路径，当出现n条路径时，说明在该条路径上至少存在一个环，也就是如果在进行一次遍历，如果节点的最短路径还能得到更新，那么只有环存在时，才会更新路径</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> v, w;<span class="comment">//v是出边，w是当前点到出边v的权值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;edge&gt; e[maxn];</span><br><span class="line"><span class="type">int</span> dis[maxn];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bellmanford</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> flag; <span class="comment">// 判断一轮循环过程中是否发生松弛操作</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//至多遍历n-1次得到最短路径</span></span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= n; u++)<span class="comment">//依次遍历每一个点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dis[u] == inf)<span class="comment">//当前点到源点还不存在路径时，不更新该点，理由如下</span></span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">// 无穷大与常数加减仍然为无穷大，因此最短路长度为 inf 的点引出的边不可能发生松弛操作</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ed : e[u])<span class="comment">//遍历当前点的所有邻边</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = ed.v, w = ed.w;</span><br><span class="line"><span class="keyword">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v] = dis[u] + w;</span><br><span class="line">flag = <span class="literal">true</span>;<span class="comment">//存在松弛操作，打上标记</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag)<span class="comment">// 没有可以松弛的边时就停止算法</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第 n 轮循环仍然可以松弛时说明 s 点可以抵达一个【负环】</span></span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="folyd"><a href="#folyd" class="headerlink" title="folyd"></a>folyd</h4><p>设定矩阵$A_{n*n}$，其中</p><p>$$<br>a_{ij}&#x3D;\left{<br>\begin{matrix}0,i&#x3D;j<br> \c_{i,j}, (i,j)\in E<br> \ \infty , (i,j)\notin  E<br>\end{matrix}\right.<br>$$</p><p><strong>视频讲解：</strong>​<a href="https://www.bilibili.com/video/BV1w54y1Q79E?spm_id_from=333.880.my_history.page.click&vd_source=bc4fa866e16a93e8322d340eefe71de3">最短路径（二）Floyd算法_哔哩哔哩_bilibili</a></p><ul><li>解决图中任意点到某一点之间的最短路问题，例如P点到M点，中间可以直达也可以经过其他点到达</li></ul><p>在视频中拓展：</p><ul><li>$A_{n*n}$矩阵依据公式$a_{ij} &#x3D; min(a_{ij},a_{ik} + a_{kj})$迭代n次后得到i到j的最短路径，但是得不到经过那些点，可以用一个额外的数组来记录经过的点，在视频讲解的末尾位置</li><li>$A_{n*n}$矩阵依据公式$a_{ij} &#x3D; min(a_{ij},max(a_{ik}, a_{kj}))$可以得到i到j的所有通路集合中的通路的最大边的的最小值，就是在这一堆通路中，每条通路都有一条最大的边，在将这些边中的最小值取出</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//针对无向图</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设k为中间节点，检查从i到j的距离和i到k，k到j（即以k作为中间节点绕行）的距离</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                grid[i][j] = grid[j][i] = <span class="built_in">min</span>(grid[i][j], grid[i][k] + grid[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h4 id="prim"><a href="#prim" class="headerlink" title="prim"></a>prim</h4><p>Prim （普里姆）算法是另一种常见并且好写的最小生成树算法。该算法的基本思想是从一个结点开始，不断加点（而不是 Kruskal 算法的加边）。具有贪心的思想。</p><p>具体来说，每次要选择距离集合（已访问点集合）最小的一个结点，以及用新的边更新其他结点的距离。</p><p>其实跟 Dijkstra 算法一样，每次找到距离最小的一个点，可以暴力找也可以用堆维护。</p><p>堆优化的方式类似 Dijkstra 的堆优化，但如果使用二叉堆等不支持 decrease-key 的堆，复杂度就不优于 Kruskal，常数也比 Kruskal 大。所以，一般情况下都使用 Kruskal 算法，在稠密图尤其是完全图上，暴力 Prim 的复杂度比 Kruskal 优，但 <strong>不一定</strong> 实际跑得更快。</p><p>时间复杂度：<code>O(n^2)</code>​</p><h5 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h5><ul><li>初始化：dist[N]为所有点到集合的距离，初始化为无穷大</li><li>任选一个点，然后将该点加入最短路集合</li><li>寻找距离到最短路集合最近的点，同时将该点加入最短路集合中</li><li>遍历该点的邻接点，更新邻接点到集合的距离dist</li><li>重复三四步骤，n次循环，即遍历n个点，得到最小生成树</li></ul><h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><p>在每一次选择一个点加入最小生成树集合中后，都会更新该点的所有邻接点到集合的距离，我们只要维护dist这个距离就可以得到答案，例如</p><p>第一次循环：在选取第一个点的时候，<code>t = 0，vis[0]==true</code>​，更新了该点的所有邻接点到0点的距离</p><p>第二次循环：选取了到0点最近的一个点，加入最小生成树集合，更新该点的所有邻接点到该点的距离</p><p>重复n次循环，也就是n个点，值得注意的是，我们每次选取的都是这个集合的所有邻接点，而这些邻接点都被更新过了，因此是可以得到答案的。</p><p>同时：还需要注意，如果在除开第一次选的点以外的点中，找到一个到集合距离无穷大的点，那么也就是说这个点是孤立点，一定是无法构成最小生成树的，即可返回<code>impossible</code>​</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> grid[N][N], n, m;</span><br><span class="line"><span class="type">int</span> dist[N], vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[t] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//如果该点非第一个点，但是该点到集合的距离是无穷大，也就是说该点是孤立出来的</span></span><br><span class="line">        <span class="keyword">if</span>(i &amp;&amp; dist[t] == INF)</span><br><span class="line">            <span class="keyword">return</span> INF;</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">if</span>(i)<span class="comment">//该点非第一个点</span></span><br><span class="line">            sum += dist[t];</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], grid[t][j]);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="kruskal"><a href="#kruskal" class="headerlink" title="kruskal"></a>kruskal</h4><p>Kruskal （克鲁斯克尔）算法是一种常见并且好写的最小生成树算法，由 Kruskal 发明。该算法的基本思想是从小到大加入边，是个贪心算法。</p><p>使用：并查集、图的存储、贪心</p><p>例题：<a href="https://www.acwing.com/problem/content/description/4294/">4291. 丛林之路 - AcWing题库</a></p><p>时间复杂度：<code>O(mlogm)</code>​（m是边数）</p><h5 id="流程：-1"><a href="#流程：-1" class="headerlink" title="流程："></a>流程：</h5><ul><li>将所有边按权值从小到大排序，时间复杂度<code>O(mlogm)</code>​</li><li>依次遍历所有边，如果某边的两点不构成回路，即加入最短路径集合</li><li>统计最短路径集合中的边个数，如果小于n-1，即不构成最小生成树，等于n-1，即可构成最小生成树</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;<span class="comment">//始点，终点，权</span></span><br><span class="line">&#125;edges[M];</span><br><span class="line"><span class="type">int</span> p[N], cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    edges[cnt].a = a, edges[cnt].b = b, edges[cnt].w = w, cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x] != x)</span><br><span class="line">        p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=n; i++) p[i] = i;</span><br><span class="line">    <span class="built_in">sort</span>(edges, edges + cnt);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, en = <span class="number">0</span>;<span class="comment">//权值和，路径条数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;cnt; i++)&#123;</span><br><span class="line"><span class="type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line">        <span class="type">int</span> pa = <span class="built_in">find</span>(a), pb = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(pa != pb)&#123;</span><br><span class="line">            p[pa] = pb;</span><br><span class="line">            sum += w;</span><br><span class="line">            en++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(en &lt; n - <span class="number">1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;无法构成最小生成树&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Aboat-major&quot;&gt;&lt;a href=&quot;#Aboat-major&quot; class=&quot;headerlink&quot; title=&quot;Aboat major&quot;&gt;&lt;/a&gt;Aboat major&lt;/h1&gt;&lt;p&gt;‍&lt;/p&gt;
&lt;h2 id=&quot;multivalued-dependen</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/10/15/hello-world/"/>
    <id>http://example.com/2023/10/15/hello-world/</id>
    <published>2023-10-15T03:10:18.518Z</published>
    <updated>2023-10-14T09:07:14.884Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
